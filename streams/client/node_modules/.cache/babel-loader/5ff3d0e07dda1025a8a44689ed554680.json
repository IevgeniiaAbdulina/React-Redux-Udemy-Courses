{"ast":null,"code":"import streams from \"../apis/streams\";\nimport history from \"../history\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from \"./types\";\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post(\"/streams\", { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); // Do some programmatic navigation to\n  // get the user back to the rot route\n\n  history.push(\"/\");\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["C:/Users/evgen/Desktop/JANE/WWW/udemy-react/my-react-app/streams/client/src/actions/index.js"],"names":["streams","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,aANF,EAOEC,WAPF,QAQO,SARP;AAUA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAET,OADD;AAELU,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMW,YAAY,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACxE,QAAM;AAAEP,IAAAA;AAAF,MAAaO,QAAQ,GAAGC,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGL,UAAL;AAAiBL,IAAAA;AAAjB,GAAzB,CAAvB;AAEAM,EAAAA,QAAQ,CAAC;AACPL,IAAAA,IAAI,EAAEP,aADC;AAEPQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAFX,GAAD,CAAR,CAJwE,CAQxE;AACA;;AACApB,EAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACD,CAXM;AAaP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOP,QAAP,IAAoB;AACpD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAY,UAAZ,CAAvB;AAEAR,EAAAA,QAAQ,CAAC;AACPL,IAAAA,IAAI,EAAEN,aADC;AAEPO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAFX,GAAD,CAAR;AAID,CAPM;AASP,OAAO,MAAMI,WAAW,GAAIC,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACrD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACwB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AAEAV,EAAAA,QAAQ,CAAC;AACPL,IAAAA,IAAI,EAAEL,YADC;AAEPM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAFX,GAAD,CAAR;AAID,CAPM;AASP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAOC,QAAP,IAAoB;AAChE,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC4B,GAAR,CAAa,YAAWF,EAAG,EAA3B,EAA8BX,UAA9B,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AACPL,IAAAA,IAAI,EAAEH,WADC;AAEPI,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAFX,GAAD,CAAR;AAID,CAPM;AASP,OAAO,MAAMQ,YAAY,GAAIH,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACtD,QAAMhB,OAAO,CAAC8B,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AAEAV,EAAAA,QAAQ,CAAC;AACPL,IAAAA,IAAI,EAAEJ,aADC;AAEPK,IAAAA,OAAO,EAAEc;AAFF,GAAD,CAAR;AAID,CAPM","sourcesContent":["import streams from \"../apis/streams\";\r\nimport history from \"../history\";\r\nimport {\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  CREATE_STREAM,\r\n  FETCH_STREAMS,\r\n  FETCH_STREAM,\r\n  DELETE_STREAM,\r\n  EDIT_STREAM,\r\n} from \"./types\";\r\n\r\nexport const signIn = (userId) => {\r\n  return {\r\n    type: SIGN_IN,\r\n    payload: userId,\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: SIGN_OUT,\r\n  };\r\n};\r\n\r\nexport const createStream = (formValues) => async (dispatch, getState) => {\r\n  const { userId } = getState().auth;\r\n  const response = await streams.post(\"/streams\", { ...formValues, userId });\r\n\r\n  dispatch({\r\n    type: CREATE_STREAM,\r\n    payload: response.data,\r\n  });\r\n  // Do some programmatic navigation to\r\n  // get the user back to the rot route\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const fetchStreams = () => async (dispatch) => {\r\n  const response = await streams.get(\"/streams\");\r\n\r\n  dispatch({\r\n    type: FETCH_STREAMS,\r\n    payload: response.data,\r\n  });\r\n};\r\n\r\nexport const fetchStream = (id) => async (dispatch) => {\r\n  const response = await streams.get(`/streams/${id}`);\r\n\r\n  dispatch({\r\n    type: FETCH_STREAM,\r\n    payload: response.data,\r\n  });\r\n};\r\n\r\nexport const editStream = (id, formValues) => async (dispatch) => {\r\n  const response = await streams.put(`/streams/${id}`, formValues);\r\n\r\n  dispatch({\r\n    type: EDIT_STREAM,\r\n    payload: response.data,\r\n  });\r\n};\r\n\r\nexport const deleteStream = (id) => async (dispatch) => {\r\n  await streams.delete(`/streams/${id}`);\r\n\r\n  dispatch({\r\n    type: DELETE_STREAM,\r\n    payload: id,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}